/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "adserver_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




ad_info::~ad_info() throw() {
}


void ad_info::__set_os(const std::string& val) {
  this->os = val;
}

void ad_info::__set_browser(const std::string& val) {
  this->browser = val;
}

void ad_info::__set_region(const std::string& val) {
  this->region = val;
}

void ad_info::__set_hour(const int32_t val) {
  this->hour = val;
}

void ad_info::__set_searchWord(const std::string& val) {
  this->searchWord = val;
}

const char* ad_info::ascii_fingerprint = "C18AD26BF3FFAD5198DC3D25D5D7A521";
const uint8_t ad_info::binary_fingerprint[16] = {0xC1,0x8A,0xD2,0x6B,0xF3,0xFF,0xAD,0x51,0x98,0xDC,0x3D,0x25,0xD5,0xD7,0xA5,0x21};

uint32_t ad_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->os);
          this->__isset.os = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->browser);
          this->__isset.browser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->region);
          this->__isset.region = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hour);
          this->__isset.hour = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->searchWord);
          this->__isset.searchWord = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ad_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ad_info");

  xfer += oprot->writeFieldBegin("os", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->os);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("browser", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->browser);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("region", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->region);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hour", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->hour);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("searchWord", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->searchWord);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ad_info &a, ad_info &b) {
  using ::std::swap;
  swap(a.os, b.os);
  swap(a.browser, b.browser);
  swap(a.region, b.region);
  swap(a.hour, b.hour);
  swap(a.searchWord, b.searchWord);
  swap(a.__isset, b.__isset);
}

ad_info::ad_info(const ad_info& other0) {
  os = other0.os;
  browser = other0.browser;
  region = other0.region;
  hour = other0.hour;
  searchWord = other0.searchWord;
  __isset = other0.__isset;
}
ad_info& ad_info::operator=(const ad_info& other1) {
  os = other1.os;
  browser = other1.browser;
  region = other1.region;
  hour = other1.hour;
  searchWord = other1.searchWord;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ad_info& obj) {
  using apache::thrift::to_string;
  out << "ad_info(";
  out << "os=" << to_string(obj.os);
  out << ", " << "browser=" << to_string(obj.browser);
  out << ", " << "region=" << to_string(obj.region);
  out << ", " << "hour=" << to_string(obj.hour);
  out << ", " << "searchWord=" << to_string(obj.searchWord);
  out << ")";
  return out;
}


